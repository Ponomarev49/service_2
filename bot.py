import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from calc_distance import calculate_distance, Coordinates

COORDINATES_ERROR = 0.01

bot = Bot(token="")
dp = Dispatcher()


def get_connection_to_stores_db():
    return sqlite3.connect('data/stores.db')


def get_connection_to_workers_db():
    return sqlite3.connect('data/employees.db')


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def check_user_by_username(username):
    connection = get_connection_to_workers_db()
    cursor = connection.cursor()
    cursor.execute("SELECT * FROM employees WHERE username = ?", (username,))
    user = cursor.fetchone()
    connection.close()
    return user


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user_to_db(username, store_id):
    connection = get_connection_to_workers_db()
    cursor = connection.cursor()
    cursor.execute("INSERT INTO employees (username, store_id) VALUES (?, ?)", (username, store_id))
    connection.commit()
    connection.close()


def get_nearest_stores_for_user(user_lat, user_lon):
    connection = get_connection_to_stores_db()
    cursor = connection.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT id, name, lat, lon, city, line1, line2, code FROM stores")
    stores = cursor.fetchall()
    connection.close()

    # –°—á–∏—Ç–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∫–∞–∂–¥–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ
    store_distances = []
    for store in stores:
        store_id, name, lat, lon, city, line1, line2, code = store
        distance = calculate_distance(Coordinates([user_lat, user_lon]), Coordinates([lat, lon]))
        store_distances.append((distance, store_id, name, lat, lon, city, line1, line2, code))

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞–≥–∞–∑–∏–Ω—ã –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –∏ –≤—ã–±–∏—Ä–∞–µ–º —Ç—Ä–∏ –±–ª–∏–∂–∞–π—à–∏—Ö
    store_distances.sort()
    return store_distances[:3]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –µ–≥–æ username
def get_employee_workplace_id(username):
    connection = get_connection_to_workers_db()
    cursor = connection.cursor()

    # –ü–æ–ª—É—á–∞–µ–º id_workplace –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    cursor.execute("""
        SELECT store_id
        FROM employees
        WHERE username = ?
    """, (username,))

    result = cursor.fetchone()
    connection.close()

    connection = get_connection_to_stores_db()
    cursor = connection.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ –µ–≥–æ id
    cursor.execute("""
        SELECT lat, lon
        FROM stores
        WHERE id = ?
    """, (result[0],))

    result = cursor.fetchone()
    connection.close()

    return result


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: types.Message):
    username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ username
    user = check_user_by_username(username)

    if user:
        await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
    else:
        await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /on_work
@dp.message(Command("on_work"))
async def on_work_command(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
@dp.message(F.location)
async def location_handler(message: types.Message):
    if message.location:
        user_lat = message.location.latitude
        user_lon = message.location.longitude


        if check_user_by_username(message.from_user.username):
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            store_coords = get_employee_workplace_id(message.from_user.username)
            store_lat, store_lon = store_coords
            distance = calculate_distance(Coordinates([user_lat, user_lon]), Coordinates([store_lat, store_lon]))

            if distance <= COORDINATES_ERROR:
                await message.answer("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ.")
            else:
                await message.answer("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞.")

        else:
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∏ –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞
            nearest_stores = get_nearest_stores_for_user(user_lat, user_lon)

            # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
            buttons = []
            response_text = "–í–æ—Ç —Ç—Ä–∏ –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞:\n\n"

            for distance, store_id, name, lat, lon, city, line1, line2, code in nearest_stores:
                response_text += (f"üè¨ {name}\nüìç –ê–¥—Ä–µ—Å: {line1}, {city}\n"
                                  f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.2f} –∫–º\n\n")
                buttons.append(
                    [InlineKeyboardButton(text=f"–í—ã–±—Ä–∞—Ç—å: {name}", callback_data=f"select_store_{store_id}")])

            inline_kb = InlineKeyboardMarkup(inline_keyboard=buttons)

            await message.answer(response_text, reply_markup=inline_kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö
@dp.callback_query(F.data.startswith('select_store_'))
async def process_store_selection(callback_query: types.CallbackQuery):
    store_id = int(callback_query.data.split('_')[-1])

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_user_to_db(username=callback_query.from_user.username, store_id=store_id)

    await callback_query.answer(f"–ú–∞–≥–∞–∑–∏–Ω —Å ID {store_id} –≤—ã–±—Ä–∞–Ω.")
    await callback_query.message.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞–≥–∞–∑–∏–Ω. –°–ø–∞—Å–∏–±–æ!")


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
