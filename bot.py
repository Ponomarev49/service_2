import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup
import os
from dotenv import load_dotenv

from calc_distance import calculate_distance, Coordinates
from db_api_connector import stores_db_connector, employees_db_connector

COORDINATES_ERROR = 0.05

load_dotenv()

token = os.getenv("token")
DB_CONNECTION_PARAMS: tuple[str, str] = os.getenv("SUPABASE_URL"), os.getenv("SUPABASE_KEY")

bot = Bot(token=token)
dp = Dispatcher(storage=MemoryStorage())


class LocationStates(StatesGroup):
    set_workplace = State()  # –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞
    check_on_work = State()  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ
    change_phone = State()  # –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞


def create_main_keyboard():
    change_phone = (KeyboardButton(text="–°–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"))
    change_work = (KeyboardButton(text="–°–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã"))
    check_work = (KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç–µ"))

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[change_phone, change_work, check_work]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard


def create_phone_keyboard():
    phone_button = KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[phone_button]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard


def create_location_keyboard():
    location_button = KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[location_button]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard


@dp.message(Command("start"))
async def start_command(message: types.Message):
    username = message.from_user.username
    if employees_db_connector.check_user_by_username(username):
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!", reply_markup=create_main_keyboard())
    else:
        await message.answer(
            "–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=create_phone_keyboard()
        )


# –°–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã
@dp.message(F.text == "–°–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã")
async def handle_change_work(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã:",
                         reply_markup=create_location_keyboard())
    await state.set_state(LocationStates.set_workplace)


# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç–µ
@dp.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç–µ")
async def handle_check_work(message: types.Message, state: FSMContext):
    username = message.from_user.username
    store_id = employees_db_connector.get_employee_workplace_coordinates(username)
    coordinates = stores_db_connector.get_store_coordinates_by_id(store_id)
    store_lat, store_lon = coordinates["lat"], coordinates["lon"]

    await state.update_data(store_lat=store_lat, store_lon=store_lon)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –ª–∏ –≤—ã –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ:",
        reply_markup=create_location_keyboard()
    )
    await state.set_state(LocationStates.check_on_work)


# –°–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(F.text == "–°–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
async def handle_change_phone(message: types.Message, state: FSMContext):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=create_phone_keyboard()
    )
    await state.set_state(LocationStates.change_phone)


@dp.message(F.contact)
async def contact_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()

    phone_number = message.contact.phone_number
    username = message.from_user.username

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞
    if current_state == LocationStates.change_phone:
        employees_db_connector.update_user_phone(username, phone_number)
        await message.answer(f"–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω: {phone_number}", reply_markup=create_main_keyboard())
    else:
        if not employees_db_connector.check_user_by_username(username):
            employees_db_connector.add_user_to_db(username, phone_number)
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=create_location_keyboard())
            await state.set_state(LocationStates.set_workplace)


@dp.message(F.location)
async def location_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞
    if current_state == LocationStates.set_workplace:
        user_lat = message.location.latitude
        user_lon = message.location.longitude

        nearest_stores = stores_db_connector.get_nearest_stores_for_user(user_lat, user_lon)
        buttons = []
        response_text = "–¢—Ä–∏ –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞:\n\n"

        for distance, store_id, name, lat, lon, city, line1 in nearest_stores:
            response_text += (f"üè¨ {name}\nüìç –ê–¥—Ä–µ—Å: {line1}, {city}\n"
                              f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.2f} –∫–º\n\n")
            buttons.append(
                [InlineKeyboardButton(text=f"–í—ã–±—Ä–∞—Ç—å: {name}", callback_data=f"select_store_{store_id}")])

        inline_kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(response_text, reply_markup=inline_kb)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞
    elif current_state == LocationStates.check_on_work:
        data = await state.get_data()
        store_lat = data.get("store_lat")
        store_lon = data.get("store_lon")

        user_lat = message.location.latitude
        user_lon = message.location.longitude

        distance = calculate_distance(
            Coordinates([user_lat, user_lon]),
            Coordinates([store_lat, store_lon])
        )

        if distance <= COORDINATES_ERROR:
            await message.answer("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ.", reply_markup=create_main_keyboard())
        else:
            await message.answer("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ.", reply_markup=create_main_keyboard())
    await state.clear()


@dp.callback_query(F.data.startswith('select_store_'))
async def process_store_selection(callback_query: types.CallbackQuery):
    store_id = int(callback_query.data.split('_')[-1])
    employees_db_connector.update_user_store_id(username=callback_query.from_user.username, store_id=store_id)
    await callback_query.message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–∞—à–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ {store_id}",
                                        reply_markup=create_main_keyboard())


async def main():
    stores_db_connector.connect(*DB_CONNECTION_PARAMS)
    employees_db_connector.connect(*DB_CONNECTION_PARAMS)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
